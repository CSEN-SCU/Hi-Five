"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
exports.prepareServer = exports.prepareParams = exports.prepareAuth = exports.parseResponse = exports.getJSONSchemaDefaults = void 0;
var oas_to_har_1 = __importDefault(require("@readme/oas-to-har"));
var fetch_har_1 = __importDefault(require("fetch-har"));
var form_data_encoder_1 = require("form-data-encoder");
require("isomorphic-fetch");
// `AbortController` was shipped in Node 15 so when Node 14 is EOL'd we can drop this dependency.
var node_abort_controller_1 = require("node-abort-controller");
var fetchError_1 = __importDefault(require("./errors/fetchError"));
var getJSONSchemaDefaults_1 = __importDefault(require("./getJSONSchemaDefaults"));
exports.getJSONSchemaDefaults = getJSONSchemaDefaults_1["default"];
var parseResponse_1 = __importDefault(require("./parseResponse"));
exports.parseResponse = parseResponse_1["default"];
var prepareAuth_1 = __importDefault(require("./prepareAuth"));
exports.prepareAuth = prepareAuth_1["default"];
var prepareParams_1 = __importDefault(require("./prepareParams"));
exports.prepareParams = prepareParams_1["default"];
var prepareServer_1 = __importDefault(require("./prepareServer"));
exports.prepareServer = prepareServer_1["default"];
var APICore = /** @class */ (function () {
    function APICore(spec, userAgent) {
        this.auth = [];
        this.server = false;
        this.config = {};
        this.spec = spec;
        this.userAgent = userAgent;
    }
    APICore.prototype.setSpec = function (spec) {
        this.spec = spec;
    };
    APICore.prototype.setConfig = function (config) {
        this.config = config;
        return this;
    };
    APICore.prototype.setUserAgent = function (userAgent) {
        this.userAgent = userAgent;
        return this;
    };
    APICore.prototype.setAuth = function () {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        this.auth = values;
        return this;
    };
    APICore.prototype.setServer = function (url, variables) {
        if (variables === void 0) { variables = {}; }
        this.server = { url: url, variables: variables };
        return this;
    };
    APICore.prototype.fetch = function (path, method, body, metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var operation;
            return __generator(this, function (_a) {
                operation = this.spec.operation(path, method);
                return [2 /*return*/, this.fetchOperation(operation, body, metadata)];
            });
        });
    };
    APICore.prototype.fetchOperation = function (operation, body, metadata) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0, prepareParams_1["default"])(operation, body, metadata).then(function (params) {
                        var data = __assign({}, params);
                        // If `sdk.server()` has been issued data then we need to do some extra work to figure out
                        // how to use that supplied server, and also handle any server variables that were sent
                        // alongside it.
                        if (_this.server) {
                            var preparedServer = (0, prepareServer_1["default"])(_this.spec, _this.server.url, _this.server.variables);
                            if (preparedServer) {
                                data.server = preparedServer;
                            }
                        }
                        // @ts-expect-error `this.auth` typing is off. FIXME
                        var har = (0, oas_to_har_1["default"])(_this.spec, operation, data, (0, prepareAuth_1["default"])(_this.auth, operation));
                        var timeoutSignal;
                        var init = {};
                        if (_this.config.timeout) {
                            var controller_1 = new node_abort_controller_1.AbortController();
                            timeoutSignal = setTimeout(function () { return controller_1.abort(); }, _this.config.timeout);
                            // @todo Typing on `AbortController` coming out of `node-abort-controler` isn't right so when
                            // we eventually drop that dependency we can remove the `as any` here.
                            init.signal = controller_1.signal;
                        }
                        return (0, fetch_har_1["default"])(har, {
                            files: data.files || {},
                            init: init,
                            multipartEncoder: form_data_encoder_1.FormDataEncoder,
                            userAgent: _this.userAgent
                        })
                            .then(function (res) { return __awaiter(_this, void 0, void 0, function () {
                            var parsed;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, (0, parseResponse_1["default"])(res)];
                                    case 1:
                                        parsed = _a.sent();
                                        if (res.status >= 400 && res.status <= 599) {
                                            throw new fetchError_1["default"](parsed.status, parsed.data, parsed.headers, parsed.res);
                                        }
                                        return [2 /*return*/, parsed];
                                }
                            });
                        }); })["finally"](function () {
                            if (_this.config.timeout) {
                                clearTimeout(timeoutSignal);
                            }
                        });
                    })];
            });
        });
    };
    return APICore;
}());
exports["default"] = APICore;
