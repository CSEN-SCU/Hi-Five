"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAPIDefinitionType = exports.isAPIDefinition = exports.stringToJSON = exports.isSwagger = exports.isPostman = exports.isOpenAPI = exports.getType = exports.normalizeURL = exports.isBuffer = void 0;
var js_yaml_1 = __importStar(require("js-yaml"));
/**
 * Determine if a given variable is a `Buffer`.
 *
 */
function isBuffer(obj) {
    return (obj != null &&
        obj.constructor != null &&
        typeof obj.constructor.isBuffer === 'function' &&
        obj.constructor.isBuffer(obj));
}
exports.isBuffer = isBuffer;
/**
 * Converts GitHub blob URLs to raw URLs
 */
function normalizeURL(url) {
    if (url.startsWith('https://github.com/') && url.includes('/blob/')) {
        return url.replace('github.com', 'raw.githubusercontent.com').replace('/blob/', '/');
    }
    return url;
}
exports.normalizeURL = normalizeURL;
/**
 * Determine the type of a given variable. Returns `false` if unrecognized.
 *
 */
function getType(obj) {
    if (isBuffer(obj)) {
        return 'buffer';
    }
    else if (typeof obj === 'object') {
        return 'json';
    }
    else if (typeof obj === 'string') {
        if (obj.match(/\s*{/)) {
            return 'string-json';
        }
        else if (obj.match(/\n/)) {
            // Not sure about this...
            return 'string-yaml';
        }
        else if (obj.substring(0, 4) === 'http') {
            return 'url';
        }
        return 'path';
    }
    return false;
}
exports.getType = getType;
/**
 * Determine if a given schema if an OpenAPI definition.
 *
 */
function isOpenAPI(schema) {
    return !!schema.openapi;
}
exports.isOpenAPI = isOpenAPI;
/**
 * Determine if a given schema is a Postman collection.
 *
 * Unfortunately the Postman schema spec doesn't have anything like `openapi` or `swagger` for us
 * to look at but it does require that `info` and `item` be present and as `item` doesn't exist in
 * OpenAPI or Swagger we can use the combination of those two properties to determine if what we
 * have is a Postman collection.
 *
 * @see {@link https://schema.postman.com/json/collection/v2.0.0/collection.json}
 * @see {@link https://schema.postman.com/json/collection/v2.1.0/collection.json}
 */
function isPostman(schema) {
    return !!schema.info && !!schema.item;
}
exports.isPostman = isPostman;
/**
 * Determine if a given schema if an Swagger definition.
 *
 */
function isSwagger(schema) {
    return !!schema.swagger;
}
exports.isSwagger = isSwagger;
/**
 * Convert a YAML blob or stringified JSON object into a JSON object.
 *
 */
function stringToJSON(string) {
    if (typeof string === 'object') {
        return string;
    }
    else if (string.match(/^\s*{/)) {
        return JSON.parse(string);
    }
    return js_yaml_1.default.load(string, { schema: js_yaml_1.JSON_SCHEMA });
}
exports.stringToJSON = stringToJSON;
/**
 * Determine if a given schema is an API definition that we can support.
 *
 */
function isAPIDefinition(schema) {
    return isOpenAPI(schema) || isPostman(schema) || isSwagger(schema);
}
exports.isAPIDefinition = isAPIDefinition;
/**
 * Retrieve the type of API definition that a given schema is.
 *
 */
function getAPIDefinitionType(schema) {
    if (isOpenAPI(schema)) {
        return 'openapi';
    }
    else if (isPostman(schema)) {
        return 'postman';
    }
    else if (isSwagger(schema)) {
        return 'swagger';
    }
    return 'unknown';
}
exports.getAPIDefinitionType = getAPIDefinitionType;
