"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.staticHeaders = exports.rawBody = exports.explorerDisabled = exports.customCodeSamples = exports.corsProxyDisabled = exports.codeSamplesDisabled = exports.codeSampleLanguages = exports.authDefaults = void 0;
var util_1 = require("../util");
/**
 * Determine if a given API definition is using our `x-default` extension for defining auth
 * defaults.
 *
 * @see {@link https://docs.readme.com/main/docs/openapi-extensions#authentication-defaults}
 */
function authDefaults(definition) {
    return (0, util_1.query)(["$.components.securitySchemes..['x-default']^"], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.authDefaults = authDefaults;
/**
 * Determine all of the code sample languages, using the `x-readme.samples-languages` extension
 * that are specified within an API definition.
 *
 * @see {@link https://docs.readme.com/main/docs/openapi-extensions#code-sample-languages}
 */
function codeSampleLanguages(definition) {
    var results = Array.from(new Set((0, util_1.query)(["$..['x-readme']['samples-languages']", "$..['x-samples-languages']"], definition)
        .map(function (res) { return res.value; })
        .reduce(function (prev, next) { return prev.concat(next); }, [])));
    results.sort();
    return results;
}
exports.codeSampleLanguages = codeSampleLanguages;
/**
 * Determine if a given API defintion is using the `x-samples-enabled` extension for disabling
 * code samples.
 *
 * @see {@link https://docs.readme.com/main/docs/openapi-extensions#disable-code-examples}
 */
function codeSamplesDisabled(definition) {
    return Array.from(new Set((0, util_1.query)([
        "$['x-samples-enabled']^",
        "$['x-readme']['samples-enabled']",
        "$..paths[*]..['x-samples-enabled']^",
        "$..paths[*]..['x-readme']['samples-enabled']^^",
    ], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); })));
}
exports.codeSamplesDisabled = codeSamplesDisabled;
/**
 * Determine if a given API definition is using our `x-proxy-enabled` extension for disabling the
 * "Try It" CORS proxy.
 *
 * @see {@link https://docs.readme.com/main/docs/openapi-extensions#cors-proxy-enabled}
 */
function corsProxyDisabled(definition) {
    return Array.from(new Set((0, util_1.query)([
        "$['x-proxy-enabled']^",
        "$['x-readme']['proxy-enabled']",
        "$..paths[*]..['x-proxy-enabled']^",
        "$..paths[*]..['x-readme']['proxy-enabled']^^",
    ], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); })));
}
exports.corsProxyDisabled = corsProxyDisabled;
/**
 * Determine if a given API definition is using our `x-code-samples` extension for documentating
 * custom code samples.
 *
 * @see {@link https://docs.readme.com/main/docs/openapi-extensions#custom-code-samples}
 */
function customCodeSamples(definition) {
    return (0, util_1.query)(["$..['x-code-samples']", "$..['x-readme']['code-samples']"], definition)
        .filter(function (res) {
        // If `code-samples` is an empty array then we ignore it.
        return Array.isArray(res.value) && res.value.length ? res : false;
    })
        .map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.customCodeSamples = customCodeSamples;
/**
 * Determine if a given API definition is using our `x-explorer-enabled` extension for disabling
 * "Try It" functionality.
 *
 * @see {@link https://docs.readme.com/main/docs/openapi-extensions#disable-the-api-explorer}
 */
function explorerDisabled(definition) {
    return (0, util_1.query)([
        "$['x-explorer-enabled']^",
        "$['x-readme']['explorer-enabled']",
        "$..paths[*]..['x-explorer-enabled']^",
        "$..paths[*]..['x-readme']['explorer-enabled']^^",
    ], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.explorerDisabled = explorerDisabled;
/**
 * Determine if a given API definition uses the `RAW_BODY` manual API hack for raw body content.
 *
 * @see {@link https://docs.readme.com/main/docs/manual-api-editor#raw-body-content-body-content}
 */
function rawBody(definition) {
    return (0, util_1.query)(['$..RAW_BODY^^'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.rawBody = rawBody;
/**
 * Determine if a given API definition is using our `x-readme.headers` extension for defining
 * static headers.
 *
 * @see {@link https://docs.readme.com/main/docs/openapi-extensions#static-headers}
 */
function staticHeaders(definition) {
    return (0, util_1.query)(["$..['x-headers']", "$..['x-readme']['headers']"], definition)
        .filter(function (res) {
        // If `headers` is an empty array then we ignore it.
        return Array.isArray(res.value) && res.value.length ? res : false;
    })
        .map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.staticHeaders = staticHeaders;
