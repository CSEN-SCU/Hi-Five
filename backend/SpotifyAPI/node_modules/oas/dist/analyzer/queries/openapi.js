"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.xml = exports.webhooks = exports.totalOperations = exports.serverVariables = exports.securityTypes = exports.polymorphism = exports.parameterSerialization = exports.mediaTypes = exports.links = exports.discriminators = exports.circularRefs = exports.callbacks = exports.additionalProperties = void 0;
var __1 = __importDefault(require("../.."));
var util_1 = require("../util");
/**
 * Determine if a given API definition uses the `additionalProperties` schema property.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}
 */
function additionalProperties(definition) {
    return (0, util_1.query)(['$..additionalProperties'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.additionalProperties = additionalProperties;
/**
 * Determine if a given API definition utilizes `callbacks`.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#callbackObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#callbackObject}
 */
function callbacks(definition) {
    return (0, util_1.query)(['$.components.callbacks', '$.paths..callbacks'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.callbacks = callbacks;
/**
 * Determine if a given API definition has circular refs.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}
 */
function circularRefs(definition) {
    return __awaiter(this, void 0, void 0, function () {
        var oas, results;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    oas = new __1.default(JSON.parse(JSON.stringify(definition)));
                    return [4 /*yield*/, oas.dereference()];
                case 1:
                    _a.sent();
                    results = oas.getCircularReferences();
                    results.sort();
                    return [2 /*return*/, results];
            }
        });
    });
}
exports.circularRefs = circularRefs;
/**
 * Determine if a given API definition utilizes discriminators.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#discriminatorObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#discriminatorObject}
 */
function discriminators(definition) {
    return (0, util_1.query)(['$..discriminator'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.discriminators = discriminators;
/**
 * Determine if a given API definition utilizes `links`.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#linkObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#linkObject}
 */
function links(definition) {
    return (0, util_1.query)(['$..links'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.links = links;
/**
 * Determine all of the available media types used within an API definition.
 *
 * @todo This query currently picks up false positives if there is an object named `content`.
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#request-body-object}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#request-body-object}
 */
function mediaTypes(definition) {
    var results = Array.from(new Set((0, util_1.query)(['$..paths..content'], definition)
        .map(function (res) {
        // This'll transform `results`, which looks like `[['application/json'], ['text/xml']]`
        // into `['application/json', 'text/xml']`.
        return Object.keys(res.value);
    })
        .flat()));
    results.sort();
    return results;
}
exports.mediaTypes = mediaTypes;
/**
 * Determine if a given API definition uses parameter serialization.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#parameter-object}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#parameter-object}
 */
function parameterSerialization(definition) {
    return (0, util_1.query)(['$..parameters[*].style^'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.parameterSerialization = parameterSerialization;
/**
 * Determine if a given API definition utilizes schema polymorphism and/of interitance.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#schema-object}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#schema-object}
 */
function polymorphism(definition) {
    var results = Array.from(new Set((0, util_1.query)(['$..allOf^', '$..anyOf^', '$..oneOf^'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); })));
    results.sort();
    return results;
}
exports.polymorphism = polymorphism;
/**
 * Determine every kind of security type that a given API definition has documented.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#securitySchemeObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#securitySchemeObject}
 */
function securityTypes(definition) {
    return Array.from(new Set((0, util_1.query)(['$.components.securitySchemes..type'], definition).map(function (res) { return res.value; })));
}
exports.securityTypes = securityTypes;
/**
 * Determine if a given API definition utilizes server variables.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#serverVariableObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#serverVariableObject}
 */
function serverVariables(definition) {
    return (0, util_1.query)(['$.servers..variables^'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.serverVariables = serverVariables;
/**
 * Determine how many operations are defined in a given API definition.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#operationObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#operationObject}
 */
function totalOperations(definition) {
    return (0, util_1.query)(['$..paths[*]'], definition)
        .map(function (res) { return Object.keys(res.value); })
        .flat().length;
}
exports.totalOperations = totalOperations;
/**
 * Determine if a given API definition utilizes `webhooks` support in OpenAPI 3.1.
 *
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#oasObject}
 */
function webhooks(definition) {
    return (0, util_1.query)(['$.webhooks[*]'], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.webhooks = webhooks;
/**
 * Determine if a given API definition has XML schemas, payloads, or responses.
 *
 * @todo detect `+xml` media types
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#xmlObject}
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#xmlObject}
 */
function xml(definition) {
    return (0, util_1.query)([
        '$.components.schemas..xml^',
        '$..parameters..xml^',
        '$..requestBody..xml^',
        "$..requestBody..['application/xml']",
        "$..requestBody..['application/xml-external-parsed-entity']",
        "$..requestBody..['application/xml-dtd']",
        "$..requestBody..['text/xml']",
        "$..requestBody..['text/xml-external-parsed-entity']",
        '$..requestBody.content[?(@property.match(/\\+xml$/i))]',
        "$..responses..['application/xml']",
        "$..responses..['application/xml-external-parsed-entity']",
        "$..responses..['application/xml-dtd']",
        "$..responses..['text/xml']",
        "$..responses..['text/xml-external-parsed-entity']",
        '$..responses[*].content[?(@property.match(/\\+xml$/i))]',
    ], definition).map(function (res) { return (0, util_1.refizePointer)(res.pointer); });
}
exports.xml = xml;
