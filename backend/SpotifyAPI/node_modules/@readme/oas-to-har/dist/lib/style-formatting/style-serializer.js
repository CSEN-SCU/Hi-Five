"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
exports.__esModule = true;
exports.encodeDisallowedCharacters = void 0;
/**
 * This file has been extracted and modified from `swagger-client`.
 *
 * @license Apache 2.0
 * @link https://npm.im/swagger-client
 * @link https://github.com/swagger-api/swagger-js/blob/master/src/execute/oas3/style-serializer.js
 */
var isRfc3986Reserved = function (char) { return ":/?#[]@!$&'()*+,;=".indexOf(char) > -1; };
var isRfc3986Unreserved = function (char) { return /^[a-z0-9\-._~]+$/i.test(char); };
function isURIEncoded(value) {
    try {
        return decodeURIComponent(value) !== value;
    }
    catch (err) {
        // `decodeURIComponent` will throw an exception if a string that has an un-encoded percent sign
        //  in it (like 20%), o if it's throwing we can just assume that the value hasn't been encoded.
        return false;
    }
}
function isObject(value) {
    return typeof value === 'object' && value !== null;
}
function stylize(config) {
    var value = config.value;
    if (Array.isArray(value)) {
        return encodeArray(config);
    }
    if (isObject(value)) {
        return encodeObject(config);
    }
    return encodePrimitive(config);
}
exports["default"] = stylize;
function encodeDisallowedCharacters(str, 
// eslint-disable-next-line @typescript-eslint/default-param-last
_a, parse) {
    var 
    // eslint-disable-next-line @typescript-eslint/default-param-last
    _b = _a === void 0 ? {} : _a, escape = _b.escape, _c = _b.returnIfEncoded, returnIfEncoded = _c === void 0 ? false : _c, isAllowedReserved = _b.isAllowedReserved;
    if (typeof str === 'number') {
        str = str.toString();
    }
    if (returnIfEncoded) {
        if (isURIEncoded(str)) {
            return str;
        }
    }
    if (typeof str !== 'string' || !str.length) {
        return str;
    }
    if (!escape) {
        return str;
    }
    if (parse) {
        return JSON.parse(str);
    }
    // In ES6 you can do this quite easily by using the new ... spread operator. This causes the
    // string iterator (another new ES6 feature) to be used internally, and because that iterator is
    // designed to deal with code points rather than UCS-2/UTF-16 code units.
    return __spreadArray([], __read(str), false).map(function (char) {
        if (isRfc3986Unreserved(char)) {
            return char;
        }
        if (isRfc3986Reserved(char) && (escape === 'unsafe' || isAllowedReserved)) {
            return char;
        }
        var encoder = new TextEncoder();
        var encoded = Array.from(encoder.encode(char))
            .map(function (byte) { return "0".concat(byte.toString(16).toUpperCase()).slice(-2); })
            .map(function (encodedByte) { return "%".concat(encodedByte); })
            .join('');
        return encoded;
    })
        .join('');
}
exports.encodeDisallowedCharacters = encodeDisallowedCharacters;
/**
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-examples}
 */
function encodeArray(_a) {
    var location = _a.location, key = _a.key, value = _a.value, style = _a.style, explode = _a.explode, escape = _a.escape, _b = _a.isAllowedReserved, isAllowedReserved = _b === void 0 ? false : _b;
    var valueEncoder = function (str) {
        return module.exports.encodeDisallowedCharacters(str, {
            escape: escape,
            returnIfEncoded: location === 'query',
            isAllowedReserved: isAllowedReserved
        });
    };
    switch (style) {
        /**
         * @example <caption>`style: simple`</caption>
         * `["blue","black","brown"]` → `blue,black,brown`
         */
        case 'simple':
            return value.map(function (val) { return valueEncoder(val); }).join(',');
        /**
         * @example <caption>`style: label`</caption>
         * `["blue","black","brown"]` → `.blue.black.brown`
         */
        case 'label':
            return ".".concat(value.map(function (val) { return valueEncoder(val); }).join('.'));
        /**
         * @example <caption>`style: matrix` + `explode: true`</caption>
         * `["blue","black","brown"]` → `;color=blue;color=black;color=brown`
         *
         * @example <caption>`style: matrix` + `explode: false` (the default behavior)</caption>
         * `["blue","black","brown"]` → `;color=blue,black,brown	`
         */
        case 'matrix':
            return value
                .map(function (val) { return valueEncoder(val); })
                .reduce(function (prev, curr) {
                if (!prev || explode) {
                    return "".concat(prev || '', ";").concat(key, "=").concat(curr);
                }
                return "".concat(prev, ",").concat(curr);
            }, '');
        /**
         * @example <caption>`style: form` + `explode: true`</caption>
         * `["blue","black","brown"]` → `color=blue&color=black&color=brown`
         *
         * @example <caption>`style: form` + `explode: false` (the default behavior)</caption>
         * `["blue","black","brown"]` → `color=blue,black,brown`
         */
        case 'form':
            return value.map(function (val) { return valueEncoder(val); }).join(explode ? "&".concat(key, "=") : ',');
        /**
         * @example <caption>`style: spaceDelimited`</caption>
         * `["blue","black","brown"]` → `blue%20black%20brown`
         */
        case 'spaceDelimited':
            return value.map(function (val) { return valueEncoder(val); }).join(" ".concat(explode ? "".concat(key, "=") : ''));
        /**
         * @example <caption>`style: pipeDelimited`</caption>
         * `["blue","black","brown"]` → `blue|black|brown`
         */
        case 'pipeDelimited':
            return value.map(function (val) { return valueEncoder(val); }).join("|".concat(explode ? "".concat(key, "=") : ''));
        default:
            return undefined;
    }
}
/**
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-examples}
 */
function encodeObject(_a) {
    var location = _a.location, key = _a.key, value = _a.value, style = _a.style, explode = _a.explode, escape = _a.escape, _b = _a.isAllowedReserved, isAllowedReserved = _b === void 0 ? false : _b;
    var valueEncoder = function (str) {
        return module.exports.encodeDisallowedCharacters(str, {
            escape: escape,
            returnIfEncoded: location === 'query',
            isAllowedReserved: isAllowedReserved
        });
    };
    var valueKeys = Object.keys(value);
    switch (style) {
        /**
         * @example <caption>`style: simple` + `explode: true`</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `R=100,G=200,B=150`
         *
         * @example <caption>`style: simple` + `explode: false` (the default behavior)</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `R,100,G,200,B,150`
         */
        case 'simple':
            return valueKeys.reduce(function (prev, curr) {
                var val = valueEncoder(value[curr]);
                var middleChar = explode ? '=' : ',';
                var prefix = prev ? "".concat(prev, ",") : '';
                return "".concat(prefix).concat(curr).concat(middleChar).concat(val);
            }, '');
        /**
         * @example <caption>`style: label` + `explode: true`</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `.R=100.G=200.B=150`
         *
         * @example <caption>`style: label` + `explode: false` (the default behavior)</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `.R.100.G.200.B.150`
         */
        case 'label':
            return valueKeys.reduce(function (prev, curr) {
                var val = valueEncoder(value[curr]);
                var middleChar = explode ? '=' : '.';
                var prefix = prev ? "".concat(prev, ".") : '.';
                return "".concat(prefix).concat(curr).concat(middleChar).concat(val);
            }, '');
        /**
         * @example <caption>`style: matrix` + `explode: true`</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `;R=100;G=200;B=150`
         *
         * @example <caption>`style: matrix` + `explode: false` (the default behavior)</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `;color=R,100,G,200,B,150`
         */
        case 'matrix':
            if (explode) {
                return valueKeys.reduce(function (prev, curr) {
                    var val = valueEncoder(value[curr]);
                    var prefix = prev ? "".concat(prev, ";") : ';';
                    return "".concat(prefix).concat(curr, "=").concat(val);
                }, '');
            }
            return valueKeys.reduce(function (prev, curr) {
                var val = valueEncoder(value[curr]);
                var prefix = prev ? "".concat(prev, ",") : ";".concat(key, "=");
                return "".concat(prefix).concat(curr, ",").concat(val);
            }, '');
        /**
         * @example <caption>`style: form` + `explode: true`</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `R=100&G=200&B=150`
         *
         * @example <caption>`style: form` + `explode: false` (the default behavior)</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `color=R,100,G,200,B,150`
         */
        case 'form':
            return valueKeys.reduce(function (prev, curr) {
                var val = valueEncoder(value[curr]);
                var prefix = prev ? "".concat(prev).concat(explode ? '&' : ',') : '';
                var separator = explode ? '=' : ',';
                return "".concat(prefix).concat(curr).concat(separator).concat(val);
            }, '');
        /**
         * @example <caption>`style: spaceDelimited`</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `R%20100%20G%20200%20B%20150`
         */
        case 'spaceDelimited':
            return valueKeys.reduce(function (prev, curr) {
                var val = valueEncoder(value[curr]);
                var prefix = prev ? "".concat(prev, " ") : '';
                return "".concat(prefix).concat(curr, " ").concat(val);
            }, '');
        /**
         * @example <caption>`style: pipeDelimited`</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `R|100|G|200|B|150`
         */
        case 'pipeDelimited':
            return valueKeys.reduce(function (prev, curr) {
                var val = valueEncoder(value[curr]);
                var prefix = prev ? "".concat(prev, "|") : '';
                return "".concat(prefix).concat(curr, "|").concat(val);
            }, '');
        /**
         * @example <caption>`style: deepObject`</caption>
         * `{ "R": 100, "G": 200, "B": 150 }` → `color[R]=100&color[G]=200&color[B]=150`
         */
        case 'deepObject':
            return valueKeys.reduce(function (curr) {
                var val = valueEncoder(value[curr]);
                return "".concat(val);
            }, '');
        default:
            return undefined;
    }
}
/**
 * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.0.md#style-examples}
 */
function encodePrimitive(_a) {
    var location = _a.location, key = _a.key, value = _a.value, style = _a.style, escape = _a.escape, _b = _a.isAllowedReserved, isAllowedReserved = _b === void 0 ? false : _b;
    var valueEncoder = function (str) {
        return module.exports.encodeDisallowedCharacters(str, {
            escape: escape,
            returnIfEncoded: location === 'query' || location === 'body',
            isAllowedReserved: isAllowedReserved
        });
    };
    switch (style) {
        /**
         * @example <caption>`style: simple`</caption>
         * `blue` → `blue`
         */
        case 'simple':
            return valueEncoder(value);
        /**
         * @example <caption>`style: label`</caption>
         * `blue` → `.blue`
         */
        case 'label':
            return ".".concat(valueEncoder(value));
        /**
         * @example <caption>`style: matrix`</caption>
         * `blue` → `;color=blue`
         */
        case 'matrix':
            if (value === '') {
                return ";".concat(key);
            }
            return ";".concat(key, "=").concat(valueEncoder(value));
        /**
         * @example <caption>`style: form`</caption>
         * `blue` → `color=blue`
         */
        case 'form':
            return valueEncoder(value);
        /**
         * @example <caption>`style: deepObject`</caption>
         * `blue` → n/a
         */
        case 'deepObject':
            return valueEncoder(value);
        default:
            return undefined;
    }
}
