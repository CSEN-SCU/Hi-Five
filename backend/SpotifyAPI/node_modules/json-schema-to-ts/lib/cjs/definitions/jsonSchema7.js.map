{"version":3,"sources":["../../../src/definitions/jsonSchema7.ts"],"names":["$JSONSchema7","Symbol"],"mappings":";;;;;;AAKO,IAAMA,YAAY,GAAGC,MAAM,CAAC,cAAD,CAA3B;AACP;AACA;AACA;;AAGA;AACA;AACA;;AAgEA;AACA;AACA","sourcesContent":["import type {\n  JSONSchema7TypeName,\n  JSONSchema7 as OriginalJSONSchema7,\n} from \"json-schema\";\n\nexport const $JSONSchema7 = Symbol(\"$JSONSchema7\");\n/**\n * Symbol used to make extended JSON schemas actually extend the JSONSchema type constraint at all time\n */\nexport type $JSONSchema7 = typeof $JSONSchema7;\n\n/**\n * JSON Schema type constraint\n */\nexport type JSONSchema7 =\n  | boolean\n  | (Omit<\n      OriginalJSONSchema7,\n      | \"type\"\n      | \"const\"\n      | \"enum\"\n      | \"items\"\n      | \"additionalItems\"\n      | \"contains\"\n      | \"properties\"\n      | \"required\"\n      | \"patternProperties\"\n      | \"additionalProperties\"\n      | \"dependencies\"\n      | \"propertyNames\"\n      | \"if\"\n      | \"then\"\n      | \"else\"\n      | \"allOf\"\n      | \"anyOf\"\n      | \"oneOf\"\n      | \"not\"\n      | \"definitions\"\n      | \"examples\"\n      | \"default\"\n    > &\n      Readonly<{\n        // Needed to have extended JSON schemas actually extend the JSONSchema type constraint at all time\n        [$JSONSchema7]?: $JSONSchema7;\n        type?: JSONSchema7TypeName | readonly JSONSchema7TypeName[];\n        const?: unknown;\n        enum?: unknown;\n        items?: JSONSchema7 | readonly JSONSchema7[];\n        additionalItems?: JSONSchema7;\n        contains?: JSONSchema7;\n        properties?: Readonly<Record<string, JSONSchema7>>;\n        required?: readonly string[];\n        patternProperties?: Readonly<Record<string, JSONSchema7>>;\n        additionalProperties?: JSONSchema7;\n        dependencies?: Readonly<\n          Record<string, JSONSchema7 | readonly string[]>\n        >;\n        propertyNames?: JSONSchema7;\n        if?: JSONSchema7;\n        then?: JSONSchema7;\n        else?: JSONSchema7;\n        allOf?: readonly JSONSchema7[];\n        anyOf?: readonly JSONSchema7[];\n        oneOf?: readonly JSONSchema7[];\n        not?: JSONSchema7;\n        nullable?: boolean;\n        definitions?: Readonly<Record<string, JSONSchema7>>;\n        // Required to avoid applying Readonly to Array interface, which results in invalid type (Array is treated as Object):\n        // https://github.com/ThomasAribart/json-schema-to-ts/issues/48\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/0e40d820c92ec6457854fa6726bbff2ffea4e7dd/types/json-schema/index.d.ts#L590\n        // https://github.com/microsoft/TypeScript/issues/3496#issuecomment-128553540\n        examples?: readonly unknown[];\n        // Required to allow array values in default field\n        // https://github.com/ThomasAribart/json-schema-to-ts/issues/80\n        default?: unknown;\n      }>);\n\n/**\n * JSON Schema with reference type constraint\n */\nexport type JSONSchema7Reference = JSONSchema7 & Readonly<{ $id: string }>;\n"],"file":"jsonSchema7.js"}