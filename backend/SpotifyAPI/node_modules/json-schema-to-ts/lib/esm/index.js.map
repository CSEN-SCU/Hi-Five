{"version":3,"sources":["../../src/index.ts"],"names":["wrapCompilerAsTypeGuard","wrapValidatorAsTypeGuard","asConst"],"mappings":"AAsBA,SACEA,uBADF,EAEEC,wBAFF,EAGEC,OAHF;AAMA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA","sourcesContent":["import type { M } from \"ts-algebra\";\n\nimport type {\n  ExtendedJSONSchema7,\n  FromExtendedSchemaOptions,\n  FromSchemaDefaultOptions,\n  FromSchemaOptions,\n  JSONSchema7,\n  JSONSchema7Extension,\n  UnextendJSONSchema7,\n} from \"./definitions\";\nimport type { ParseOptions } from \"./parse-options\";\nimport type { ParseSchema } from \"./parse-schema\";\n\nexport type {\n  DeserializationPattern,\n  FromSchemaOptions,\n  FromExtendedSchemaOptions,\n  FromSchemaDefaultOptions,\n  JSONSchema7Extension,\n} from \"./definitions\";\nexport type { $Compiler, Compiler, $Validator, Validator } from \"./utils\";\nexport {\n  wrapCompilerAsTypeGuard,\n  wrapValidatorAsTypeGuard,\n  asConst,\n} from \"./utils\";\n\n/**\n * JSON Schema type constraint\n */\nexport type JSONSchema = JSONSchema7;\n\n/**\n * Extended JSON Schema type constraint\n * @param EXTENSION JSONSchema7Extension\n * @returns Type\n */\nexport type ExtendedJSONSchema<EXTENSION extends JSONSchema7Extension> =\n  ExtendedJSONSchema7<EXTENSION>;\n\n/**\n * Given a JSON schema defined with the `as const` statement, infers the type of valid instances\n * @param SCHEMA JSON schema\n */\nexport type FromSchema<\n  SCHEMA extends JSONSchema,\n  OPTIONS extends FromSchemaOptions = FromSchemaDefaultOptions,\n> = M.$Resolve<ParseSchema<SCHEMA, ParseOptions<SCHEMA, OPTIONS>>>;\n\n/**\n * Given an extended JSON schema defined with the `as const` statement, infers the type of valid instances\n * @param SCHEMA JSON schema\n */\nexport type FromExtendedSchema<\n  EXTENSION extends JSONSchema7Extension,\n  SCHEMA extends ExtendedJSONSchema<EXTENSION>,\n  OPTIONS extends\n    FromExtendedSchemaOptions<EXTENSION> = FromSchemaDefaultOptions,\n  UNEXTENDED_SCHEMA = UnextendJSONSchema7<EXTENSION, SCHEMA>,\n> = UNEXTENDED_SCHEMA extends JSONSchema\n  ? FromSchema<UNEXTENDED_SCHEMA, OPTIONS>\n  : never;\n"],"file":"index.js"}